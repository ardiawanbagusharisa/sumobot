// Draw.compute

#pragma kernel InitBackground
#pragma kernel Update

RWTexture2D<float4> _Canvas;
uint _CanvasWidth;
uint _CanvasHeight;
float4 _PreviousMousePosition;
float4 _MousePosition;
float4 _RectMin;
float4 _RectMax;
float _BrushSize;
float _WiggleSize;
float4 _BrushColour;
float4 _BackgroundColour;
bool _MouseDown;
bool _IsEraser;
bool _UseRect;

float4 Brush(
    float2 pixelPos,
    float4 currentColor,
    float4 brushColor,
    float brushSize,
    float2 prevPos,
    float2 currPos)
{
    // Add wiggle: consistent pseudo-random offset per-pixel
    float2 randVec = float2(
        frac(sin(dot(pixelPos , float2(12.9898,78.233))) * 43758.5453),
        frac(sin(dot(pixelPos , float2(39.3468,11.135))) * 12345.6789)
    );
    randVec = (randVec - 0.5) * _WiggleSize;

    prevPos += randVec;
    currPos += randVec;

    float2 seg = currPos - prevPos;
    float segLen2 = dot(seg, seg);

    float t = segLen2 > 0
        ? clamp(dot(pixelPos - prevPos, seg) / segLen2, 0.0, 1.0)
        : 0.0;
    float2 closest = prevPos + seg * t;
    float dist = length(pixelPos - closest);

    float cov = (dist < brushSize) ? 1.0 : 0.0;
    
    if (_IsEraser)
    {
        float3 col = lerp(currentColor.rgb, _BackgroundColour.rgb, cov);
        float a = lerp(currentColor.a, 0.0, cov); 
        return float4(col, a);
    }
    
    // Blend RGB, max alpha
    float3 col = lerp(currentColor.rgb, brushColor.rgb, cov);
    float a = max(currentColor.a, cov);
    return float4(col, a);
}

float4 DrawRect(
    float2 pixelPos,
    float4 currentColor,
    float4 brushColor,
    float2 rectMin,     // bottom-left corner
    float2 rectMax,     // top-right corner
    bool isEraser
)
{
    // Check if pixel lies inside rectangle
    bool inside = (pixelPos.x >= rectMin.x && pixelPos.x <= rectMax.x &&
                   pixelPos.y >= rectMin.y && pixelPos.y <= rectMax.y);

    if (!inside) return currentColor;

    if (isEraser)
    {
        // Eraser replaces with background
        return float4(_BackgroundColour.rgb, 0.0);
    }

    // Blend RGB and max alpha
    float3 col = lerp(currentColor.rgb, brushColor.rgb, 1.0);
    float a = max(currentColor.a, 1.0);
    return float4(col, a);
}

[numthreads(8, 8, 1)]
void InitBackground(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _CanvasWidth || id.y >= _CanvasHeight)
        return;
    _Canvas[id.xy] = float4(_BackgroundColour.rgb, 0.0);
}

[numthreads(8, 8, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    if (!_MouseDown)
        return;
    if (id.x >= _CanvasWidth || id.y >= _CanvasHeight)
        return;

    if (_UseRect)
    {
        _Canvas[id.xy] = DrawRect(
            id.xy,
            _Canvas[id.xy],
            _BrushColour,
            _RectMin.xy,
            _RectMax.xy,
            _IsEraser
        );
    }
    else
    {
        _Canvas[id.xy] = Brush(
            id.xy,
            _Canvas[id.xy],
            _BrushColour,
            _BrushSize,
            _PreviousMousePosition.xy,
            _MousePosition.xy
        );
    }
}
